im.se@outlook.com

< your secret here >

 814c5723c21e7e90a3eae36c8df3c513 -

Kernel System Calls
-------------------
< Your Answer >

# execve("/usr/bin/ls", ["ls", "-li", "whatIdo"],
system call that executes the program /usr/bin/ls with the arguments ["ls", "-li", "whatIdo"]

# newfstatat(1, "", {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0), ...}, AT_EMPTY_PATH) = 0

The newfstatat system call is used to retrieve information about a file, such as its size, mode, link count, and access time, in a buffer
It is similar to the stat and lstat system calls, but it allows the file to be specified relative to a directory file descriptor instead of the current working directory

whatIdo is creating a folder with name "welcomeToDevOpsJan22"
inside the folder file named Goodluck with the text "There you go... tell me what I do."


Binary Numbers
--------------
< Your Answer >
#1. Convert the following binary numbers to a decimal: 111, 100, 10110

111=7
100=4
10110=22

#2.What is the available decimal range represented by a 8 bits binary number?

in range of smallest value 0 and largest value 11111111 or (1+2+4+8+16+32+64+128)=255 

#3.Given a 9 bits binary number, suggest a method to represent a negative numbers between 0-255
 8 bits for representation a number between 0 to 255, 9th bit (MSB) = for representation a sign: 1 for "-", 0 for "+"

To represent the decimal number -255 in binary using 9 bits, we can use the two’s complement method. Here are the steps:
Convert the absolute value of the decimal number to binary. The absolute value of -255 is 255, which is 11111111 in 8 bits.
Invert all the bits in the binary representation obtained in step 1. This gives us 00000000.
Add 1 to the result obtained in step 2. This gives us 00000001.
Add a leading 1 to the result obtained in step 3 to indicate that the number is negative. This gives us 100000001

3.1 binary representing of the numbers in 4bit system
binary  decimal
  0000        0
  0010        2
  1010       -2
  1101       -5
  1000       -0

4. Suggest a method to represent floating point numbers (e.g. 12.3, 15.67, 0.231) using a 8 bits binary numbers
To represent the decimal numbers 12.3, 15.67, and 0.231 in an 8-bit binary system, we can use the following steps:

Convert the integer part of the decimal number to binary.
Convert the fractional part of the decimal number to binary.
Combine the binary representations of the integer and fractional parts.
12.3:
Integer part: 1100
Fractional part: 0.0100110011001100…
Combined: 1100.01001100

15.67:
Integer part: 1111
Fractional part: 0.1010011110101111…
Combined: 1111.10100111
0.231:

Integer part: 0
Fractional part: 0.0011100110011001…
Combined: 0.00111001
